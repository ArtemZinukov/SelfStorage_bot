from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup
from environs import Env
import telebot
from telebot import types


env = Env()
env.read_env()
token = env.str("TG_BOT_TOKEN")
bot = telebot.TeleBot(token)
# bot = TeleBot(token).


def save_name(message):
    name = message.text
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     f'–û—Ç–ª–∏—á–Ω–æ, {name}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å')
    bot.register_next_step_handler(message, save_address)


def save_address(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     f'–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã')


@bot.message_handler(content_types=['text'])
def hear_menu(message):
    if message.text == '/start':
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(text='–¢–∞—Ä–∏—Ñ—ã', callback_data='prefix:–¢–∞—Ä–∏—Ñ—ã'))
        inline_markup.add(types.InlineKeyboardButton(text='–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è', callback_data='prefix:–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è'))
        inline_markup.add(types.InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å', callback_data='prefix:–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å'))
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.\n–ó–∞–±–µ—Ä–µ–º –≤–µ—â–∏ –Ω–∞ –Ω–∞—à —Å–∫–ª–∞–¥, —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø—Ä–∏–≤–µ–∑–µ–º –æ–±—Ä–∞—Ç–Ω–æ',
                         reply_markup=inline_markup)
    elif message.text:
        save_name(message)



@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == 'prefix')
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)
    data_ = call.data.split(":")[1]
    if data_ == '–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å':
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(text='–ü—Ä–∏–≤–µ–∑—Ç–∏ —Å–∞–º–æ–º—É', callback_data=f"prefix2:–ü—Ä–∏–≤–µ–∑—Ç–∏ —Å–∞–º–æ–º—É"))
        inline_markup.add(types.InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞', callback_data=f"prefix2:–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞"))
        inline_markup.add(types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥ üëà', callback_data="prefix2:–Ω–∞–∑–∞–¥"))
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç', call.message.chat.id, call.message.message_id,
                              reply_markup=inline_markup)

@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "prefix2")
def querry_handler2(call):
    data_ = call.data.split(":")[1]
    inline_markup = types.InlineKeyboardMarkup()
    if data_ == '–ü—Ä–∏–≤–µ–∑—Ç–∏ —Å–∞–º–æ–º—É':
        inline_markup.add(types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥ üëà', callback_data="prefix3:–Ω–∞–∑–∞–¥"))
        bot.edit_message_text(f'–ü—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞:\n–ê–¥—Ä–µ—Å_1\n–ê–¥—Ä–µ—Å_2\n–ê–¥—Ä–µ—Å_3\n', call.message.chat.id, call.message.message_id, reply_markup=inline_markup)

    elif data_ == '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞':
        bot.send_message(call.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')






    elif data_ == '–Ω–∞–∑–∞–¥':
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(text='–¢–∞—Ä–∏—Ñ—ã', callback_data='prefix:–¢–∞—Ä–∏—Ñ—ã'))
        inline_markup.add(types.InlineKeyboardButton(text='–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è', callback_data='prefix:–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è'))
        inline_markup.add(types.InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å', callback_data='prefix:–ó–∞–∫–∞–∑–∞—Ç—å –±–æ–∫—Å'))
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=inline_markup)


@bot.callback_query_handler(func=lambda call: call.data.split(":")[0] == "prefix3")
def querry_handler2(call):
    data_ = call.data.split(":")[1]
    if data_ == '–Ω–∞–∑–∞–¥':
        inline_markup = types.InlineKeyboardMarkup()
        inline_markup.add(types.InlineKeyboardButton(text='–ü—Ä–∏–≤–µ–∑—Ç–∏ —Å–∞–º–æ–º—É', callback_data=f"prefix2:–ü—Ä–∏–≤–µ–∑—Ç–∏ —Å–∞–º–æ–º—É"))
        inline_markup.add(types.InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞',
                                                     callback_data=f"prefix2:–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞"))
        inline_markup.add(types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥ üëà', callback_data="prefix2:–Ω–∞–∑–∞–¥"))
        bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç', call.message.chat.id, call.message.message_id,
                              reply_markup=inline_markup)





# def send_message_with_file(message, file_name):
#     with open(file_name, 'r', encoding='utf-8') as file:
#         text = file.read()
#     bot.send_message(message.chat.id, text)
#
#
# def send_order_message(message):
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.row('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞')
#     markup.row('–í—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏–µ–º–∞ –≤–µ—â–µ–π')
#     markup.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
#     order_message = '''
# –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:
# '''
#     bot.send_message(message.chat.id, order_message, reply_markup=markup)
#
#
# @bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
# def send_back_to_main(message):
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.row('–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è')
#     markup.row('–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π')
#     markup.row('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
#     back_to_main_message = '''
# –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é:
# '''
#     bot.send_message(message.chat.id, back_to_main_message, reply_markup=markup)
#
#
# @bot.message_handler(commands=['start'])
# def send_welcome(message):
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.row('–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è')
#     markup.row('–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π')
#     markup.row('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
#     start_message = '''
# –ü—Ä–∏–≤–µ—Ç –ú—ã SelfStorage!
# –ö–æ–≥–¥–∞ –º—ã –ø–æ–Ω–∞–¥–æ–±–∏–º—Å—è:
#
# 1.–î–ª—è –≤–∞—à–∏—Ö –ª–∏—á–Ω—ã—Ö –≤–µ—â–µ–π
# 2.–î–ª—è –±–∏–∑–Ω–µ—Å–∞
# 3.–†–µ–º–æ–Ω—Ç
# 4.–ü–µ—Ä–µ–µ–∑–¥
# 5.–ò –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ
# '''
#     bot.send_message(message.chat.id, start_message, reply_markup=markup)
#
#
# @bot.message_handler(func=lambda message: message.text == '–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –≤–µ—â–µ–π')
# def send_prohibited_items(message):
#     send_message_with_file(message, 'prohibited_items.txt')
#
#
# @bot.message_handler(func=lambda message: message.text == '–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è')
# def send_store_conditions(message):
#     send_message_with_file(message, 'store_conditions.txt')
#
#
# @bot.message_handler(func=lambda message: message.text == '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
# def send_order(message):
#     send_order_message(message)
#
#
# @bot.message_handler(func=lambda message: message.text == '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞')
# def send_free_delivery(message):
#     free_delivery_message = '''
# –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –¥–æ–º–∞!
# –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –∏ –º—ã –¥–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
# '''
#     bot.send_message(message.chat.id, free_delivery_message)
#
#
# @bot.message_handler(func=lambda message: message.text == '–í—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å –ø—Ä–∏–µ–º–∞ –≤–µ—â–µ–π')
# def send_address_choice(message):
#     markup = ReplyKeyboardMarkup(resize_keyboard=True)
#     markup.row('–ú—è—Å–Ω–∏—Ü–∫–∞—è 60')
#     markup.row('–û—Å—Ç–æ–∂–µ–Ω–∫–∞ 62')
#     markup.row('–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è —É–ª–∏—Ü–∞ 38')
#     markup.row('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
#     bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–∏–µ–º–∞ –≤–µ—â–µ–π:', reply_markup=markup)
#
#
# @bot.message_handler(func=lambda message: message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
# def send_back_to_main(message):
#     send_back_to_main(message)
#
#
# def main():
#     bot.infinity_polling()
#
#
# if __name__ == "__main__":
#     main()

